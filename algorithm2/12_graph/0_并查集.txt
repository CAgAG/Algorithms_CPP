
并查集常用来解决连通性问题。
大白话就是当我们需要判断两个元素是否在同一个集合里的时候，我们就要想到用并查集。
并查集主要有两个功能：
1. 将两个元素添加到一个集合中。
2. 判断两个元素在不在同一个集合

模板:

int n = 1005; // n根据题目中节点数量而定，一般比节点数量大一点就好
vector<int> father = vector<int> (n, 0); // C++里的一种数组结构

// 并查集初始化
void init() {
    for (int i = 0; i < n; ++i) {
        father[i] = i;  // 每个元素都是自己的父亲节点
    }
}
// 并查集里寻根的过程
int find(int u) {
   if (u == father[u]) return u;  // // 如果根就是自己，直接返回
   else return father[u] = find(father[u]); // 路径压缩, 如果根不是自己，就根据数组下标一层一层向下找
}

// 判断 u 和 v是否找到同一个根 (可联通)
bool isSame(int u, int v) {
    u = find(u);
    v = find(v);
    return u == v;
}

// 将v->u 这条【边】加入并查集
void join(int u, int v) {
    u = find(u); // 寻找u的根
    v = find(v); // 寻找v的根
    if (u == v) return ; // 如果发现根相同，则说明在一个集合，不用两个节点相连直接返回
    father[v] = u;
}